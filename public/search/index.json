[{"content":"üëã About This Website Welcome! This website is a collection of my academic journey, technical projects, and professional portfolio, built using Hugo as part of my first experience with the Go programming ecosystem.\nHere, you\u0026rsquo;ll find:\nüìÑ My Resume ‚Äì highlighting my educational background, skills, and experience üíº Project Showcases ‚Äì a series of projects from both my undergraduate and graduate studies, covering: üß† Artificial Intelligence (AI) üìà Machine Learning (ML) üóÉÔ∏è Database Design ü§ñ RPA Automation üìä Project Management These projects span industries and applications‚Äîfrom building digital human avatars using deep learning, to automating nonprofit fundraising with machine learning, to designing full-stack rental platforms in PHP and MySQL, and leading cloud analytics dashboard projects with QlikSense and AI.\nüß∞ Skills \u0026amp; Tools Here are some of the technologies I\u0026rsquo;ve used throughout my work:\nLanguages: Python, SQL, PHP, Go, JavaScript, C, C++ Tools \u0026amp; Frameworks: scikit-learn, Pandas, Flask, Vue.js, Gradio, QlikSense Database: MySQL, PostgreSQL, phpMyAdmin Project Tools: Gantt Chart, AON, WBS, Risk Matrix, RACI üõ†Ô∏è Ongoing Development This site is a work in progress. I plan to:\nüîÅ Continuously update with new projects and ideas ‚úçÔ∏è Add a blog section with my personal reflections and learning notes üìö Share reading summaries, interview prep, and thoughts on product, tech, and business Thanks for visiting ‚Äî I hope this gives you insight into who I am and what I‚Äôm building!\n‚Äî Vicki\n","date":"2025-04-13T00:00:00Z","image":"https://Yetongye.github.io/p/about-this-website-me/R0000861_hu_7965a521b6d75ec.JPG","permalink":"https://Yetongye.github.io/p/about-this-website-me/","title":"About this website \u0026 me"},{"content":"MBTI Personality Prediction Project This project was developed with the goal of automating MBTI personality type predictions using user-generated text.\nProblem Statement Traditional MBTI personality assessments rely on self-reports, which can be subjective and biased.\nGoal: Predict personality types based on text data, offering a scalable and objective solution for:\nRecruitment \u0026amp; candidate-job fit Personalized recommendations Mental health applications Ad targeting \u0026amp; behavioral analysis Workflow 1. Data Cleaning\nTokenization Removal of URLs, special characters, stopwords 2. Feature Engineering\nTraditional: TF-IDF Deep Learning: Token Embeddings 3. Model Training\nCompared Logistic Regression, Random Forest, and GRU (deep learning) 4. Evaluation Metrics\nAccuracy, Precision, F1-score Stratified train/test split to reduce class imbalance impact 5. Deployment Consideration\nAPI-based prediction system for scalable real-time usage Models \u0026amp; Performance Model Accuracy Precision F1-score Logistic Regression 0.6406 0.66 0.64 Random Forest 0.6083 0.64 0.59 GRU (Deep Learning) 0.6486 0.7974 N/A Logistic Regression: Fast, interpretable, but weak in semantic nuance Random Forest: Great for short-texts and robust to overfitting GRU: Best for long-form text like Reddit posts and job applications Insights GRU provided the best accuracy and is suited for real-world, high-stakes predictions Logistic Regression still performs well in constrained environments Wordcloud visualizations helped illustrate key lexical differences between personality types Future Improvements Add more data, especially underrepresented MBTI types (e.g., INFJ) Try BERT/RoBERTa for better context modeling Use SMOTE to balance class distribution Incorporate user metadata (likes, shares, activity patterns) Business Impact Scalable pipeline to support AI-driven hiring platforms Enables real-time personalization for apps \u0026amp; services Bridges psychology and machine learning in a production-ready format üìé PDF Slide Deck: MBTI Classification Report\nüíª Code Repository: MBTI Classification Code\n","date":"2025-03-10T00:00:00Z","image":"https://Yetongye.github.io/p/mbti-classification/mbtiprediction_hu_ae70d43058d5370e.jpg","permalink":"https://Yetongye.github.io/p/mbti-classification/","title":"MBTI Classification"},{"content":"Financial Text Summarization Project üìç Live App: Try it on Hugging Face\nProblem \u0026amp; Motivation Financial analysts often face information overload when reviewing long earnings reports, transcripts, and market commentary.\nThis project builds a transformer-based system to:\nRecognize speech from meetings/calls (Wav2Vec) Summarize long financial text (BART) Analyze financial sentiment (FinBERT) Goal: Deliver fast, digestible, and actionable insights from unstructured financial data.\nModel Architecture Task Model Used Speech Recognition facebook/wav2vec2-base-960h Text Summarization knkarthick/MEETING_SUMMARY (BART) Sentiment Analysis yiyanghkust/finbert-tone (BERT variant) These models are orchestrated in a Gradio UI, enabling real-time interaction.\nWorkflow Speech-to-Text: Users can record/upload earnings call audio Text Summarization: BART reduces raw text to 3‚Äì4 key financial insights Tone Classification: BERT classifies sentiment as Positive, Neutral, or Negative This pipeline empowers analysts to quickly identify risks, sentiment, and trends.\nTechnical Highlights Transformer Models: Leveraged transfer learning from pretrained BERT, BART, and Wav2Vec2 Financial Domain Fine-Tuning: Enhanced summarization accuracy with finance-specific datasets Web Deployment: Hosted on Hugging Face Spaces using Gradio for rapid access Business Value Saves analysts hours of manual review of financial disclosures Supports investment decision-making with real-time sentiment Powers AI-driven insights for traders, PMs, and hedge funds Framework is scalable to global markets with future multilingual support Future Enhancements Multilingual report support (e.g. earnings calls in Chinese, Japanese) Real-time news stream summarization Integration with automated trading platforms Continual fine-tuning on latest market data for relevance üìé PDF Report: Download Here\nüîó Live Demo: https://huggingface.co/spaces/Vickiiiyippp/financial_text_summarization\n","date":"2025-02-25T00:00:00Z","image":"https://Yetongye.github.io/p/financial-text-summarization/textsummarization_hu_8089a37f72d072c6.jpg","permalink":"https://Yetongye.github.io/p/financial-text-summarization/","title":"Financial Text Summarization"},{"content":"Project Overview This project applies machine learning to help a charity organization optimize its direct mail fundraising strategy, reducing cost while maximizing return on investment. The goal was two-fold:\nClassify potential donors (who will donate) Predict donation amounts for identified donors Model Strategy Two separate models were created:\n1. Random Forest Classifier Predicts whether a person will donate (donr = 1/0) Achieved 88.85% accuracy on the test set Identified 408 donors out of 2007 samples 2. Linear Regression Model Predicts donation amount (damt) for donr = 1 Achieved R¬≤ = 0.56 and MAE = $0.99 Accurate, cost-efficient way to forecast campaign returns Data Insights Features grouped by: demographics, wealth, donation history Strong predictors: lifetime giving (lgif, rgif), property value (avhv), income (incm) Most monetary values were right-skewed ‚Üí normalized/scaled during preprocessing Heatmaps showed low correlation between wealth \u0026amp; donation, confirming need for advanced models Model Development Tools: Python, Pandas, scikit-learn Preprocessing: Removed irrelevant features (ID, damt, donr) Feature scaling with StandardScaler Used separate training/test sets Pipeline: Classification first (filter donors) Then regression on predicted donors only Business Value üí° Strategy 1: Focus on Top 25% Predicted Donors 102 donors selected Avg donation: $50.23 ROI: 2,411.5% Net profit: $4,919.46 üí° Strategy 2: Mail to All 408 Predicted Donors Avg donation: $12.09 ROI: 504.2% Net profit: $4,113.12 Traditional blanket mailing: Net loss of $1,099.50\nResults Classification Model: Random forest - due to its ability to handle complex feature interactions and better accuracy Prediction Model: Linear Regression - simplicity, interpretability, and efficiency in modeling relationships between predictors and the target variable Predict the donation amounts (damt) for donors identified through the classification model Provide accurate predictions of donation amounts to optimize resource allocation and enhance the charity\u0026rsquo;s return on investment The proportion of donors in the dataset is low, with the majority of the sample being non-donors (1589) and only a small proportion of donors (418) Most of the donations are in the lower range ($0-50), with only a few donations in the higher range. Business Problem Solution By targeting only high-value predicted donors:\nReduced mailing cost from $4,014 to $204 Improved net profit by over $6,000 Demonstrated how ML can guide strategic decision-making in the nonprofit sector üìé PDF Slide Deck: Charity Prediction slides\nüíª Code Repository: Charity Prediction Code\n","date":"2024-12-02T00:00:00Z","image":"https://Yetongye.github.io/p/charity-donation-prediction-with-machine-learning/charity1_hu_b7dc4cc6cc58fcb8.png","permalink":"https://Yetongye.github.io/p/charity-donation-prediction-with-machine-learning/","title":"Charity Donation Prediction with Machine Learning"},{"content":"Project Summary FPD Beverage Company suffers from outdated, disconnected systems causing poor forecasting and customer dissatisfaction. This project proposes building a QlikSense-based real-time analytics dashboard to enhance decision-making, improve delivery, and protect $350M in annual revenue.\nBudget: $250,000 (plus 10% contingency)\nTimeline: July 1 ‚Äì Dec 31 (6 months)\nProject Scope \u0026amp; Objectives Objective Develop a secure, real-time dashboard using QlikSense AI tools to visualize:\nProduct sales Packaging performance Delivery metrics by customer Deliverables Cloud dashboard (mobile/desktop) AI-driven analytics integration User training (QlikSense) Technical documentation Risk management and execution plan Work Breakdown \u0026amp; Budget WBS includes dashboard UI design, data cleansing, analytics model development, and UAT Estimation uses hybrid (top-down + bottom-up) approach Example task: Build analytics models: 219.6 hrs @ $110/hr = $24,156 Configure Qlik dashboard: 274.5 hrs = $32,195 Total Estimated Cost: $249,765\nWBS, Gantt, AON diagrams all align\nMilestones Milestone Due Team formation \u0026amp; requirements 07/31 QlikSense AI Training 08/31 Dashboard Design 09/30 Prototype Ready 10/31 User Testing 11/30 Full Launch 12/31 Communication Strategy Audience Frequency Channel Sponsor Bi-weekly Reports, Email EOC Monthly Meetings Team Weekly Slack, Standups End Users Monthly Reports, Feedback Sessions Risk Management Major Risks: Low data quality (R1), ERP integration (R4) Medium Risks: Model accuracy (R5), resource shortages (R2) Mitigations include: fallback data cleaning, cross-functional task force, retraining, and modular AI deployment Risk rating: Medium-High\nROI tied to successful integration and model output\nFeasibility \u0026amp; Success Metrics Project success measured by:\nOn-time, on-budget delivery Accurate, AI-powered dashboards Positive user adoption and stakeholder feedback Reduction in missed shipments \u0026amp; better performance predictability Responsibility Matrix (RACI) Task PM IT ERP Analyst DB Analyst Supply Chain Sales Requirements R S S S S R Dashboard R S S S S R Data Prep R S R R S S Analytics R S S R S S UAT \u0026amp; Go-Live R S S S S R üìé Full Project Plan (PDF): Download Here\n","date":"2024-12-01T00:00:00Z","image":"https://Yetongye.github.io/p/fpd-metrics-dashboard-project-management-plan/pm1_hu_d1c9f8693102aea4.png","permalink":"https://Yetongye.github.io/p/fpd-metrics-dashboard-project-management-plan/","title":"FPD Metrics Dashboard Project Management Plan"},{"content":"ü§ñ ChatRPA: Empowering Automation with AI + RPA üìå Project Overview ChatRPA is an intelligent automation assistant that combines the natural language power of ChatGPT with the operational efficiency of RPA (Robotic Process Automation). It enables users‚Äîwhether individuals or enterprises‚Äîto describe their task needs in natural language, and have RPA bots automatically execute them.\nüß† Key Technologies Function Technology Prompt Parsing ChatGPT / OpenAI Instruction Mapping Prompt Engineering Task Execution Custom RPA Components (search, type, watch, select, load) Orchestration DAG Scheduler + Go backend Interface Interactive chat with GPT üîÑ Usage Workflow User describes task via chat ChatGPT interprets \u0026amp; decomposes steps Steps are mapped to programmatic instructions RPA components are dynamically composed RPA executes task \u0026amp; returns result to user üîÅ Users can revise and re-run the steps until satisfied.\n‚òÅÔ∏è All workflows are saved in the cloud for future reuse.\nüí° Application Scenarios üè¢ Enterprise Use Case ‚Äì Bank Monitoring Stock Dividends Automatically extracts dividend announcements from stock exchange sites Classifies by region/branch Emails branch-specific files to account managers üßë‚Äçüî¨ Personal Use Case ‚Äì Academic Researcher Pulls provincial newspaper reports about specific companies from WiseSearch Downloads thousands of PDFs by date range Runs headless with long-time automation üöÄ Product Value ‚úÖ No-Code Interface ‚Äî Chat-based task input lowers barrier for non-tech users ‚úÖ Modular Automation ‚Äî RPA components can be reused \u0026amp; recombined ‚úÖ Business-Grade Precision ‚Äî Prompts guide GPT to output correct flows ‚úÖ Enterprise \u0026amp; Personal Modes ‚Äî Scales from individual use to SaaS platforms üí∞ Cost Analysis Initial development cost ~¬•50,000 Runtime cost per week ~¬•1123 (Cloud + API usage) Expansion cost per new RPA module ~¬•7000+ üíº Monetization Strategy B2B SaaS: Custom platform + tailored modules for enterprises B2C Subscription: Ready-to-use modules for automation enthusiasts Marketplace: Share/sell user-created automation modules ‚ö†Ô∏è Risk Considerations Technical: Integration stability and prompt precision Compliance: Data privacy concerns with API and third-party access Mitigation: Anonymization, encryption, and potential for domestic AI substitution üìé Full Report (PDF): Download Here\n","date":"2023-07-01T00:00:00Z","image":"https://Yetongye.github.io/p/chatrpa/chatrpa1_hu_d1fa0f472a7807b4.png","permalink":"https://Yetongye.github.io/p/chatrpa/","title":"ChatRPA"},{"content":"üëú Leasing System for Designer Bags ‚Äì Database \u0026amp; Web Development Project Overview This system is a rental management platform for a luxury handbag business built with MySQL and PHP. The platform supports customer shopping, employee data dashboards, and inventory uploads, demonstrating end-to-end database-driven web development.\nKey technologies used:\nPHP (Login, Register, Rent, CRUD logic) MySQL (Stored Procedures, Triggers, Views) HTML/CSS/JavaScript (Shop UI, form validation) phpMyAdmin and XAMPP for environment setup Database Design \u0026amp; Features The system uses five core relational tables and several stored routines.\nTable Functionality bags Stores bag images and IDs products Contains brand, price, color, and availability customer User account and profile data rent Active rentals cus_rent_return Logs returns for auditing and reporting Database Functionalities Multi-table relational integrity for rental workflows Stored procedures for bag filtering, customer ranking, and transaction summaries Triggers for return calculations and bag availability Data aggregation views for admin dashboards Implementation Breakdown Code Structure File/Folder Description /php/connection.php MySQL connection handler /php/Rent.php Booking logic \u0026amp; validation /shop.php Customer shop interface /data.php Staff dashboard \u0026amp; reporting /shelves.php Product upload \u0026amp; management /details.php Bag details page with gallery /login/ \u0026amp; /main/ Login UI and shop UI assets Building the Database Designed relational schema using MySQL Created stored procedures (Baggs_by_Manufacturer, report_customer_amount) Added triggers to auto-update inventory and log returns Integrated SQL logic into PHP front-end using mysqli_query and CALL statements Data Platform (data.php) View customer rental activity Display bags by manufacturer Rank top customers by total rental hours Report total rental income per customer Shopping Platform (shop.php) Grid/list toggle view Filter by brand and color Validate rental date \u0026amp; availability Displays stock status and rental button Handles invalid input, unauthorized access, duplicate booking Inventory Platform (shelves.php) Upload new items with image, brand, price Calls stored procedures to insert entries Validates required fields and image format Refreshes product list after insert Automation Logic On Return Trigger calculates total rental time + cost Marks item as available Inserts return into log table On Rent Prevents rental if overlapping or past date Confirms customer credentials and input integrity üìå Debugging Notes Upgraded macOS XAMPP to unlock stored procedure support Replaced $_GET[id] with isset() checks to avoid errors Used var_dump() for debugging data propagation Carefully handled SQL joins, foreign keys, session logic ","date":"2022-12-01T00:00:00Z","image":"https://Yetongye.github.io/p/leasing-luxury-database-platform/database3_hu_63bf28f0170158ef.png","permalink":"https://Yetongye.github.io/p/leasing-luxury-database-platform/","title":"Leasing Luxury Database Platform"}]